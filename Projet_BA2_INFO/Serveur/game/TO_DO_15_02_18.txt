GESTION CHECK ROI
------------------ 

- interdire de mettre en echec son propre roi !!!!

LE ROC
------

- ajouter liste roc (+ ajouter la verification d'avance si un roc est possible --> nettoyage de liste )
- message d'echec de roc
- AJOUTER LIMITATION DE POSITIONS POUR ROC

LE PAT
-------

-implemnter le "pat"

LANGUAGE
----------
langue potentiellement différente pour chaque player --> stockage de langue dans les players

Interprte
---------

création objet interpret pour rendre le changement de langue immédiat:
dans in_depl_input( les strings sont fixés pour une langue pour toute la boucle in qui suit,
plustard passage d'un objet interpret qui recevra une suite de strings normaux et de tags dico et qui lorsque demandé,
recalculera le message souhaité (il sait quels elemnts sont des tags)

ex: transmittion de pair/ 2 parametres: element puis bool pour savoir si tag ou non

ex: add ("ret",true), add("bonjour",false) [stockage interne sous forme de vecteur de strings]

VECTOR
------
replacer les occurence de std::vector<...> par VECTOR


PAIRE
-----
replacer les occurence de std::pair<...,...> par PAIRE

Quadrinome
----------

utiliser Quadrinome au lieu de std::pair<trinome, trinome> avec des doucleons d'inofs

MINUSCULES
----------
faire en sorte que MATPOSI accepte les minuscules

Optimisations et autres:
------------------------

- stocker la locaisation des rois sur le plateau
- si serie de deplacement bloquée --> bloquer les suivantes
 (ex : pour le fou si 1e case en diagonale impossisble --> 2e aussi (de la même ligne) (ex: G5,H6)
(- paramètre de succeptibilité de doublons pour chaque classe piece) [le créteur met dans la classe piece si des doublons peuvent survenir]
- matrice creuse pour plateau
- nettoyage code
(- utiliser MatPosi partout au lieu de string et paire<int,int>)
- commenter code

