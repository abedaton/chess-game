structure dossiers:
-------------------

includes relatifs
*****************

les differentes parties de codes sont séparer  dans plusieurs dossiers
avec des includes relatifs [--> /!\ ne pas changer les noms des dossiers ou les déplacer /!\]

(.cpp et .hpp correspondant restent regroupés)

--> permet bcp plus de clarté


hierarchie
**********
partie plateau contient une serie de dossiers étant le tronc prinipal d'includes
(mis dans un seul dossier au lieu d'en profondeur pour éviter de faire trop de couches)

les branches parrallelles sont mis en profondeurs

(pour bien saisr la structure regarder le diagramme des includes d'avant
[avec cette structure de dossier on peut dorénavent s'en passer])

interets:
********
- plus besoins d'entretenir un diagram d'includes car hierachie parlante
- facile d'obtenir les codes nécéssiatant un code particulier
[ex: si on est profond dans des sous-dossiers on sait que le dosseir pere contient du code qui appelele son fils (endroit ou on se trouve)]
- une recherchede dossier permet d'acceder rapidement au code voulu


structures de données customs et implemnatations particulires:
---------------------------
BitypeVar
*********

BitypeVar est mon implémentation c++ du None en python.

BitypeVar est d'un type particulier (get_var())
BitypeVar possede un booléen indiauquant si oui ou non il est rempli d'une valeur censée (get_state()) [valeur censée :: != NONE]

mode operatoire:
on verifie si BitypeVar.get_state() == true
- si oui on prend la valeur via BitypeVar.get_var()
- sinon: NONE

Dico et csv
***********
le fichiers csv permet une traduction automatique de tout les textes facilement.

la 1e ligne contient le nom du language

la 1e colonne contient les mots-clefs a utiliser pour la rechercehe dans le csv

la recherche dans le csv se fait via l'object Dico

le nom du fichier csv n'est pas importnant, un systeme de detection du fichier csv a ete mis en place,
en effet le programme cherche dans le dossier csv et prend le 1e fichier conennatnt .csv dans le nom

(le serveur possede une langue en attribut, dico recherchera avec la langue du serveur, si a un moment on change la langue tout suvera automatiquemnt!


Myostream et logfile
********************
sysyteme de logifile automatique

!!! utiliser "mout" au lieu de "std::cout"

le logfile permet la sauvegarde automatique de l'execution du programme.

pour ce faire le programme utilise un object MyOstream appellé "mout"
pour la facilité d'utilisation c'est une valeur globale.

parfois on souhaite nevoyer uniquement vers le fichier on le fait via .log_only(...) [prend en plus un booléen indiquant si il faut une fin de ligne!]


Server
******
Server n'est pas un vrai serveur, c'est juste un remplacemet temporaire
qui me permet déjà d'implementer la logique que le serveur doit avoir sans me sousier de connextion client-serveur (j'essaye de restraindre ma partie)




references utilisées:
---------------------

[ /!\ a mentionner dans le SRD /!\ ]

pour tout mon programme je me suis inspiré 4 fois de code existant sur internet:

- lecteur CSV : https://stackoverflow.com/questions/1120140/how-can-i-read-and-parse-csv-files-in-c [quasi 100%]
- MyOstream https://stackoverflow.com/questions/14155364/redirect-the-copy-of-stdcout-to-the-file [quasi 100%]
- Parcourir des dossiers: http://www.martinbroadhurst.com/list-the-files-in-a-directory-in-c.html [quasi 100%]
- MyException : https://stackoverflow.com/questions/134569/c-exception-throwing-stdstring [peu]


comment experimenter avec mon code
----------------------------------

c'est simple il suffit d'aller dans un "main_code" dans le dossier partie plateau

puis soit utiliser la version présente:
***************************************
executer Caltest.out

soit créer une nouvelle version:
********************************

effacer Caltest.out et logfile.txt

puis de faire "make" (utilisation du makefile),
ensuite d'executer Caltest.out


Encore a faire:
---------------
voir le fichier To_DO.txt
