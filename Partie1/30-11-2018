(Mise en commun des différents Use Case) 

-Répartition pour faire les différents diagrammes (sequence, collaboration, etc..)

Pour le SRD:
    -Explication de chaque fonctionalité pour le SRD
    -Séparation du Use Case en plusieurs parties pour plus de clarté
    -Diviser les différents diagrammes pour plus de clarté, et donner un diagramme global

Pour le class diagram:
    -Une classe 'Plateau'
        -attribut int 'taille'
        -utilisation d'un vecteur creux ou d'une matrice ??
    
    -Une classe abstraite 'Piece' avec comme attribut 'position' et 'depl pool' qui sont respectivement la position courante et les deplacements possibles
        -Toutes les différentes pièces hérite de cette classe avec redéfinition d'une fonction pour son déplacement
        -Chaque Piece à un déplacement relatif (Fou : (1,1), (-1,1))
    
    -Une structure 'Position' qui nous donne une position dans dans le plateau
    
Pour les joueurs:
    -un nickname
    -un mots de passe -> PAS UN ATTRIBUT DE 'User'
        -hashage ? 
    
    -un ratio de victoire/défaite
    -nombre de victoire
    -nombre de match joué
    -un historique    


Pour la database:
    -Un tableur Excel
        -une sheet par utilisateur

Matchmaking:
    -En fonction du ratio(à voir)
    -Si trop long, on prend un adversaire aléatoire

Un système pour revoir ses games (à voir quand on à tout fini)

Liste d'amis:
    -Rajout et suppression d'amis
    -Recherche d'un amis
    -Un rouage pour mute, etc..

Chat:
    -avec amis
    -avec adversaire
 


Use case:
    -Acteur:
        -Joueurs et Admin ET abstract user
        -Serveur
	
    
